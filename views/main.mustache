<!DOCTYPE html>
<head>
  <meta charset="utf-8" />
  <meta property="title" content="{{title}}" />
  <title>{{title}}</title>
</head>

<html>
  <body>
    <!-- 1. The <iframe> (and Stories` widget) will be mounted to this <div> tag -->
    <div id="stories_widget"></div>

    <script>
      // 2. This code loads the web-sdk API code asynchronously
      // and create queue in global var window.IASReady.
      window.IASReady = (function (d, s, id) {
        var js,
          fjs = d.getElementsByTagName(s)[0],
          st = window.IASReady || {};
        if (d.getElementById(id)) return st;
        js = d.createElement(s);
        js.id = id;
        js.src = "https://sdk.inappstory.com/v2.7.6/dist/js/IAS.js";
        js.async = true;
        js.charset = "UTF-8";
        fjs.parentNode.insertBefore(js, fjs);
        st._e = [];
        st.ready = function (f) {
          st._e.push(f);
        };
        return st;
      })(document, "script", "ias-wjs");

      // 3. This function creates an StoryManager instance (and StoriesList widget)
      //    after the API code downloads.
      window.IASReady.ready(function () {
        const storyManagerConfig = {
          apiKey: "{{apiKey}}",
          userId: "user", // usually - hash from real user identifier
          tags: [], // Array<string>
          placeholders: {
            user: "Guest",
          },
          imagePlaceholders: {
            userAvatar: "image_url",
          },
          lang: "eng",
        };

        // StoryManager singleton instance
        const storyManager = new window.IAS.StoryManager(storyManagerConfig);

        // AppearanceManager instance
        const appearanceManager = new window.IAS.AppearanceManager();

        // appearance config
        appearanceManager
          .setCommonOptions({
            hasLike: true,
            hasFavorite: true,
            closeButtonPosition: "right",
          })
          .setStoriesListOptions({
            title: {
              content: "The best stories",
              color: "#000",
              font: "normal",
              marginBottom: 20,
            },
            card: {
              title: {
                color: "black",
                font: '14px/16px "Segoe UI Semibold"',
                padding: 8,
              },
              gap: 10,
              height: 100,
              variant: "quad",
              border: {
                radius: 20,
                color: "blue",
                width: 2,
                gap: 3,
              },
              boxShadow: null,
              opacity: 1,
              mask: {
                color: "rgba(34, 34, 34, 0.3)",
              },
              opened: {
                border: {
                  radius: null,
                  color: "red",
                  width: null,
                  gap: null,
                },
                boxShadow: null,
                opacity: null,
                mask: {
                  color: "rgba(34, 34, 34, 0.1)",
                },
              },
            },
            // favoriteCard: {},
            layout: {
              height: 200,
              backgroundColor: "transparent",
            },
            sidePadding: 20,
            topPadding: 20,
            bottomPadding: 20,
            bottomMargin: 17,
            navigation: {
              showControls: false,
              controlsSize: 48,
              controlsBackgroundColor: "white",
              controlsColor: "black",
            },
          })
          .setStoryReaderOptions({
            scrollStyle: "flat",
            sharePanel: {
              targets: ["facebook", "twitter", "linkedin", "telegram"],
            },
          })
          .setStoryFavoriteReaderOptions({
            title: {
              content: "Favorite",
              color: "white",
              font: "14px/16px InternalPrimaryFont",
              backgroundColor: "#333333",
            },
            backgroundColor: "#333333",
          });

        // mount and start StoriesList widget
        // #stories_widget - html element selectors
        const storiesList = new storyManager.StoriesList(
          "#stories_widget",
          appearanceManager,
          { feed: "default" }
        );

        // 4. Override default loading animation
        storiesList.on(
          "startLoad",
          (loaderContainer) =>
            (loaderContainer.style.background =
              'url("https://inappstory.com/stories/loader.gif") center / 45px auto no-repeat transparent')
        );
        storiesList.on("endLoad", (loaderContainer, loadedStoriesLength) => {
          loaderContainer.style.background = "none";
          // {defaultListLength: number, favoriteListLength: number}
          console.log({ loadedStoriesLength });
        });

        // 5. Show onboarding example
        // showOnboardingStories(appearanceManager: AppearanceManager, {customTags?: string})
        // customTags - for override tags from storyManager
        // feed - for select another feed for onboarding (default feed - "onboarding")
        storyManager
          .showOnboardingStories(appearanceManager, { feed: "extraOnboarding" })
          .then((result) => {
            console.log({ showOnboardingStoriesResult: result });
            // result: boolean - were onboarding or not
          });
        // or window.IAS.StoryManager.getInstance()

        // 6. Add events for internal statistics (optional)
        const publicEvents = [
          "clickOnStory",
          "showSlide",
          "showStory",
          "closeStory",
          "clickOnButton",
          "likeStory",
          "dislikeStory",
          "favoriteStory",
          "shareStory",
          "shareStoryWithPath",
          "feedLoad",
          "feedImpression",
        ];
        publicEvents.forEach((eventName) =>
          storyManager.on(eventName, (payload) =>
            console.log("event", eventName, payload)
          )
        );
      });
    </script>
  </body>
</html>